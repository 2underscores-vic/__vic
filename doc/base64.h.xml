<chapter>
<title><tt>__vic/base64.h</tt></title>

<p>BASE64 encoder and decoder.</p>


<chapter>
<title><tt>base64</tt></title>

<p>A class used as a namespace. Contains only types and static functions. No
objects of this class are supposed to be created.</p>

</chapter>


<chapter>
<title><tt>base64::bad_format</tt></title>

<code-block lang="C++"><![CDATA[
struct base64::bad_format : public std::exception
{
    const char *what() const noexcept;
};
]]></code-block>

<p>An exception class.</p>

</chapter>


<chapter>
<title><tt>base64::encode()</tt></title>

<code-block lang="C++"><![CDATA[
// Bytes -> Text
template<class InIter, class OutIter>
void base64::encode(InIter begin, InIter end, OutIter out);
]]></code-block>

<p>Encodes [<tt>begin</tt>, <tt>end</tt>) range of bytes and writes the
resulting characters to <tt>out</tt>.</p>

<section><title>Example</title>
<code-block lang="C++"><![CDATA[
using bytes = std::string;
std::string encode_base64(const bytes &s)
{
    std::string res;
    res.reserve(__vic::base64::encoded_length(s.length()));
    __vic::base64::encode(s.begin(), s.end(), std::back_inserter(res));
    return res;
}
]]></code-block>
</section>

</chapter>


<chapter>
<title><tt>base64::decode()</tt></title>

<code-block lang="C++"><![CDATA[
// Text -> Bytes
template<class InIter, class OutIter>
void base64::decode(InIter begin, InIter end, OutIter out);
]]></code-block>

<p>Decodes [<tt>begin</tt>, <tt>end</tt>) range of characters and writes the
resulting bytes to <tt>out</tt>. <tt>bad_format</tt> is thrown if the input
sequence has invalid BASE64 format. ASCII whitespaces are ignored.</p>

<section><title>Example</title>
<code-block lang="C++"><![CDATA[
using bytes = std::string;
bytes decode_base64(const std::string &s)
{
    bytes res;
    res.reserve(__vic::base64::max_decoded_length(s.length()));
    __vic::base64::decode(s.begin(), s.end(), std::back_inserter(res));
    return res;
}
]]></code-block>
</section>

</chapter>


<chapter>
<title><tt>base64::encoded_length()</tt></title>

<code-block lang="C++">
constexpr size_t base64::encoded_length(size_t orig_len)
</code-block>

<p>Calculates the length of encoded sequence of characters using the original
length of the bytes sequence.</p>

</chapter>


<chapter>
<title><tt>base64::max_decoded_length()</tt></title>

<code-block lang="C++">
constexpr size_t base64::max_decoded_length(size_t orig_len)
</code-block>

<p>Estimates the maximum length of decoded sequence of bytes using the original
length of the characters sequence. The actual value depends on trailing
<tt>'='</tt> in the encoded value.</p>

</chapter>


</chapter>
