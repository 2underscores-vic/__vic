<chapter xml:id="posix.fs.h">
<title><tt>__vic/posix/fs.h</tt></title>

<p>Tools to handle files and paths within POSIX-compliant filesystem.</p>


<chapter xml:id="posix--basename">
<title><tt>posix::basename()</tt>, <tt>posix::dirname()</tt></title>

<code-block lang="C++"><![CDATA[
namespace posix {

std::string basename(const std::string &path);
std::string dirname(const std::string &path);
void basename(const std::string &path, std::string &res);
void dirname(const std::string &path, std::string &res);
void append_basename(const std::string &path, std::string &res);
void append_dirname(const std::string &path, std::string &res);

}
]]></code-block>

<p>The functions are counterparts of the standard shell-commands. Extract
the name of the file or the directory from the given path. There are 3
variations of each function:</p>
<list style="bulleted">
    <item>The result is returned using standard way,</item>
    <item>The result is returned using an output argument and</item>
    <item>The result is appended to the output argument.</item>
</list>

<section><title>Example</title>
<code-block lang="C++"><![CDATA[
std::cout << __vic::posix::dirname("/usr/lib") << '\n';   // "/usr"
std::cout << __vic::posix::basename("/usr/lib") << '\n';  // "lib"
std::cout << __vic::posix::dirname("/usr/lib/") << '\n';  // "/usr"
std::cout << __vic::posix::basename("/usr/lib/") << '\n'; // "lib"
std::cout << __vic::posix::dirname("lib") << '\n';        // "."
std::cout << __vic::posix::basename("lib") << '\n';       // "lib"
std::cout << __vic::posix::dirname("/") << '\n';          // "/"
std::cout << __vic::posix::basename("/") << '\n';         // "/"
std::cout << __vic::posix::dirname("") << '\n';           // "."
std::cout << __vic::posix::basename("") << '\n';          // ""
]]></code-block>
</section>

</chapter>


<chapter xml:id="posix--add_trailing_slash">
<title><tt>posix::add_trailing_slash()</tt>,
    <tt>posix::with_trailing_slash()</tt></title>

<code-block lang="C++"><![CDATA[
namespace posix {

std::string &add_trailing_slash(std::string &path);
std::string with_trailing_slash(const std::string &s);
std::string with_trailing_slash(const char *s);

}
]]></code-block>

<p>Add trailing slash to the path if absent. <tt>add_trailing_slash()</tt>
modifies the argument and returns a reference to it, while
<tt>with_trailing_slash()</tt> always creates new object and returns it.</p>

<section><title>Example</title>
<code-block lang="C++"><![CDATA[
std::string path = get_directory();
__vic::posix::add_trailing_slash(path) += "file.name"; // dir/file.name
create_file(path);
]]></code-block>
</section>

</chapter>


</chapter>
