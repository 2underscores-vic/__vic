<chapter xml:id="posix.file_stat.h">
<title><tt>__vic/posix/file_stat.h</tt></title>

<chapter xml:id="posix--file_stat">
<title><tt>posix::file_stat</tt></title>

<code-block lang="C++"><![CDATA[
namespace posix {

struct file_stat : public ::stat
{
    enum for_link_t { for_link };

    file_stat() = default;
    file_stat(const struct ::stat &s);
    explicit file_stat(int fd);
    explicit file_stat(const char *path);
    explicit file_stat(const std::string &path);
    file_stat(const char *path, for_link_t);
    file_stat(const std::string &path, for_link_t);

    void get(int fd);
    void get(const char *path);
    void get(const std::string &path);
    void get_for_link(const char *path);
    void get_for_link(const std::string &path);

    bool try_get(int fd);
    bool try_get(const char *path);
    bool try_get(const std::string &path);
    bool try_get_for_link(const char *path);
    bool try_get_for_link(const std::string &path);

    bool get_if_exists(const char *path);
    bool get_if_exists(const std::string &path);

    // POSIX-defined attributes
    dev_t   dev() const { return this->st_dev; }
    ino_t   ino() const { return this->st_ino; }
    mode_t  mode() const { return this->st_mode; }
    nlink_t nlink() const { return this->st_nlink; }
    uid_t   uid() const { return this->st_uid; }
    gid_t   gid() const { return this->st_gid; }
    off_t   size() const { return this->st_size; }
    time_t  atime() const { return this->st_atime; }
    time_t  mtime() const { return this->st_mtime; }
    time_t  ctime() const { return this->st_ctime; }

    bool is_block() const { return S_ISBLK(mode()); }
    bool is_char() const { return S_ISCHR(mode()); }
    bool is_dir() const { return S_ISDIR(mode()); }
    bool is_fifo() const { return S_ISFIFO(mode()); }
    bool is_regular() const { return S_ISREG(mode()); }
    bool is_link() const { return S_ISLNK(mode()); }
    bool is_socket() const { return S_ISSOCK(mode()); }
};
inline bool is_block(const struct ::stat &s) { return S_ISBLK(s.st_mode); }
inline bool is_char(const struct ::stat &s) { return S_ISCHR(s.st_mode); }
inline bool is_dir(const struct ::stat &s) { return S_ISDIR(s.st_mode); }
inline bool is_fifo(const struct ::stat &s) { return S_ISFIFO(s.st_mode); }
inline bool is_regular(const struct ::stat &s) { return S_ISREG(s.st_mode); }
inline bool is_link(const struct ::stat &s) { return S_ISLNK(s.st_mode); }
inline bool is_socket(const struct ::stat &s) { return S_ISSOCK(s.st_mode); }

bool is_same_file(const struct ::stat &s1, const struct ::stat &s2);

}
]]></code-block>

<p>C++ wrapper for the system structure <tt>stat</tt>. Constructors and
functions <tt>get()</tt> throw <tt>__vic::libc_error</tt> in case of error.
Functions <tt>try_get()</tt> return <tt>false</tt> instead in such cases,
error code is placed to <tt>errno</tt>.</p>

<section><title>Class members</title>

<synopsis>
<prototype>enum for_link_t { for_link }</prototype>
<p>Constructor tag.</p>
</synopsis>

<synopsis>
<prototype>file_stat()</prototype>
<p>Creates uninitialized structure.</p>
</synopsis>

<synopsis>
<prototype>file_stat(const struct ::stat &amp;s)</prototype>
<p>Copies <tt>s</tt>.</p>
</synopsis>

<synopsis>
<prototype>explicit file_stat(int fd)</prototype>
<prototype>void get(int fd)</prototype>
<p>Obtains the stat for the file descriptor <tt>fd</tt> (system call
<tt>fstat()</tt>).</p>
</synopsis>

<synopsis>
<prototype>explicit file_stat(const char *path)</prototype>
<prototype>explicit file_stat(const std::string &amp;path)</prototype>
<prototype>void get(const char *path)</prototype>
<prototype>void get(const std::string &amp;path)</prototype>
<p>Obtains the stat by the file path (system call <tt>stat()</tt>).</p>
</synopsis>

<synopsis>
<prototype>file_stat(const char *path, for_link_t)</prototype>
<prototype>file_stat(const std::string &amp;path, for_link_t)</prototype>
<prototype>void get_for_link(const char *path)</prototype>
<prototype>void get_for_link(const std::string &amp;path)</prototype>
<p>Obtains the stat for the symbolic link (system call <tt>lstat()</tt>).</p>
</synopsis>

<synopsis>
<prototype>bool try_get(int fd)</prototype>
<prototype>bool try_get(const char *path)</prototype>
<prototype>bool try_get(const std::string &amp;path)</prototype>
<prototype>bool try_get_for_link(const char *path)</prototype>
<prototype>bool try_get_for_link(const std::string &amp;path)</prototype>
<p>Counterparts of <tt>get()</tt> and <tt>get_for_link()</tt> but return
<tt>false</tt> instead of throwing exceptions.</p>
</synopsis>

<synopsis>
<prototype>bool get_if_exists(const char *path)</prototype>
<prototype>bool get_if_exists(const std::string &amp;path)</prototype>
<p>Counterpart of <tt>get()</tt> but returns <tt>false</tt> in case of the
file is not found instead of throwing. Throws on other errors.</p>
</synopsis>

<synopsis>
<prototype>dev_t   dev() const</prototype>
<prototype>ino_t   ino() const</prototype>
<prototype>mode_t  mode() const</prototype>
<prototype>nlink_t nlink() const</prototype>
<prototype>uid_t   uid() const</prototype>
<prototype>gid_t   gid() const</prototype>
<prototype>off_t   size() const</prototype>
<prototype>time_t  atime() const</prototype>
<prototype>time_t  mtime() const</prototype>
<prototype>time_t  ctime() const</prototype>
<p>Attributes of the <tt>stat</tt> structure defined by POSIX standard.</p>
</synopsis>

<synopsis>
<prototype>bool is_block() const</prototype>
<prototype>bool is_char() const</prototype>
<prototype>bool is_dir() const</prototype>
<prototype>bool is_fifo() const</prototype>
<prototype>bool is_regular() const</prototype>
<prototype>bool is_link() const</prototype>
<prototype>bool is_socket() const</prototype>
<p>Wrappers for the standard macros.</p>
</synopsis>

<synopsis>
<prototype>bool is_same_file(const struct ::stat &amp;s1, const struct ::stat &amp;s2)</prototype>
<p>Determines whether both structures refer to the same file.</p>
</synopsis>

</section>

</chapter>

</chapter>
