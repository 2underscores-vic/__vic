<chapter>
<title><tt>__vic/posix/process.h</tt></title>

<p>OS processes-related tools.</p>


<chapter>
<title><tt>posix::daemon()</tt></title>

<code-block lang="C++">
void posix::daemon(bool nochdir, bool noclose = false);
</code-block>

<p>Makes the calling process a UNIX daemon. The function is just a redirector
to the system call if the OS implements it, like *BSD, Linux, QNX. The function
throws on errors.</p>

</chapter>


<chapter>
<title><tt>posix::ignore_signals()</tt></title>

<code-block lang="C++"><![CDATA[
namespace posix {

void ignore_signals(const int sigs[], size_t sigs_len);
template<size_t Size> void ignore_signals(const int (&sigs)[Size]);
// BEGIN C++11 only
void ignore_signals(std::initializer_list<int> sigs);
// END C++11 only

}
]]></code-block>

<p>Ignore the specified signals (<tt>sigaction()</tt> call is used).</p>

<section><title>Example</title>
<code-block lang="C++"><![CDATA[
int sigs[] = { SIGINT, SIGQUIT, SIGTERM };
__vic::posix::ignore_signals(sigs);

// or in C++11 just
__vic::posix::ignore_signals({SIGINT, SIGQUIT, SIGTERM});
]]></code-block>
</section>

</chapter>


<chapter>
<title><tt>posix::process_alive()</tt></title>

<code-block lang="C++">
bool posix::process_alive(pid_t pid);
</code-block>

<p>Returns <tt>true</tt> if process associated with the PID exists and not a
zombie.</p>

</chapter>


</chapter>
