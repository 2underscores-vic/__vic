<chapter xml:id="bits.h">
<title><tt>__vic/bits.h</tt></title>

<p>Bits and bytes manipulation tools.</p>


<chapter xml:id="lo_nibble">
<title><tt>lo_nibble()</tt>, <tt>hi_nibble()</tt></title>

<code-block lang="C++">
constexpr uint8_t lo_nibble(uint8_t byte);
constexpr uint8_t hi_nibble(uint8_t byte);
</code-block>

<p>Return the value of the low-order/high-order half-byte (tetrad),
respectively.</p>

</chapter>


<chapter xml:id="msb_ones">
<title><tt>msb_ones()</tt>, <tt>lsb_ones()</tt></title>

<code-block lang="C++"><![CDATA[
template<class T> T lsb_ones(unsigned bits_num);
template<class T> T msb_ones(unsigned bits_num);
]]></code-block>

<p>Return the value of the type <tt>T</tt> with all least/most significant
<tt>bits_num</tt> bits filled with <tt>1</tt>, respectively. All other bits
are set to <tt>0</tt>.</p>

</chapter>


<chapter xml:id="get_lsbs">
<title><tt>get_lsbs()</tt></title>

<code-block lang="C++">
template&lt;class T> T get_lsbs(T v, unsigned bits_num);
</code-block>

<p>Returns <tt>bits_num</tt> least significant bits of <tt>v</tt>. In other
words, zeroes all but <tt>bits_num</tt> least significant bits.</p>

</chapter>


<chapter xml:id="ord">
<title><tt>ord()</tt></title>

<code-block lang="C++">
constexpr int ord(char ch);
</code-block>

<p>Returns the character code from 0 to 255.</p>
<postcondition>ord(ch) >= 0</postcondition>

</chapter>


<chapter xml:id="rotl">
<title><tt>rotl()</tt>, <tt>rotr()</tt></title>

<code-block lang="C++">
uint8_t  rotl(uint8_t  v, int shift);
uint16_t rotl(uint16_t v, int shift);
uint32_t rotl(uint32_t v, int shift);
uint64_t rotl(uint64_t v, int shift);

uint8_t  rotr(uint8_t  v, int shift);
uint16_t rotr(uint16_t v, int shift);
uint32_t rotr(uint32_t v, int shift);
uint64_t rotr(uint64_t v, int shift);
</code-block>

<p>The functions perform circular left (<tt>rotl</tt>) or right
(<tt>rotr</tt>) bitwise shift (rotation).</p>
<precondition><tt>0 &lt;= shift &amp;&amp; shift &lt; sizeof(v)*CHAR_BIT</tt></precondition>

</chapter>


<chapter xml:id="swapped_nibbles">
<title><tt>swapped_nibbles()</tt></title>

<code-block lang="C++">
constexpr uint8_t swapped_nibbles(uint8_t b);
</code-block>

<p>Swaps a low-order half-byte with a high-order one and returns the value.</p>

</chapter>


</chapter>
