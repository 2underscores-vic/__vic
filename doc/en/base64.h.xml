<chapter>
<title><tt>__vic/base64.h</tt></title>

<p>Base64 encoder and decoder.</p>


<chapter>
<title><tt>base64</tt></title>

<p>A class used as a namespace. Contains only types and static functions. No
objects of this class are supposed to be created.</p>

</chapter>


<chapter>
<title><tt>base64::bad_format</tt></title>

<code-block lang="C++"><![CDATA[
struct base64::bad_format : public std::exception
{
    const char *what() const noexcept;
};
]]></code-block>

<p>An exception class.</p>

</chapter>


<chapter>
<title><tt>base64::encode()</tt></title>

<code-block lang="C++"><![CDATA[
// Bytes -> Text
template<class ByteReader, class CharWriter>
void base64::encode(ByteReader reader, CharWriter writer);
]]></code-block>

<p>Encodes bytes from <tt>reader</tt> and writes the resulting characters to
<tt>writer</tt>.</p>

<p><tt>ByteReader</tt> has to model <tt>Reader&lt;unsigned char></tt> concept.
See <tt>__vic/readers</tt>.</p>

<p><tt>CharWriter</tt> has to model <tt>Writer&lt;char></tt> concept.
See <tt>__vic/writers</tt>.</p>

<section><title>Example</title>
<code-block lang="C++"><![CDATA[
#include<__vic/readers/string.h>
#include<__vic/writers/string.h>

using bytes = std::string;
using bytes_reader = __vic::string_reader;

std::string encode_base64(const bytes &s)
{
    std::string res;
    res.reserve(__vic::base64::encoded_length(s.length()));
    __vic::base64::encode(bytes_reader(s), __vic::string_writer(res));
    return res;
}
]]></code-block>
</section>

</chapter>


<chapter>
<title><tt>base64::decode()</tt></title>

<code-block lang="C++"><![CDATA[
// Text -> Bytes
template<class CharReader, class ByteWriter>
void base64::decode(CharReader reader, ByteWriter writer);
]]></code-block>

<p>Decodes characters form <tt>reader</tt> and writes the resulting bytes to
<tt>writer</tt>. <tt>base64::bad_format</tt> is thrown if the input sequence
has invalid Base64 format. ASCII whitespaces are ignored.</p>

<p><tt>CharReader</tt> has to model <tt>Reader&lt;char></tt> concept.
See <tt>__vic/readers</tt>.</p>

<p><tt>ByteWriter</tt> has to model <tt>Writer&lt;unsigned char></tt> concept.
See <tt>__vic/writers</tt>.</p>

<section><title>Example</title>
<code-block lang="C++"><![CDATA[
#include<__vic/readers/string.h>
#include<__vic/writers/string.h>

using bytes = std::string;
using bytes_writer = __vic::string_writer;

bytes decode_base64(const std::string &s)
{
    bytes res;
    res.reserve(__vic::base64::max_decoded_length(s.length()));
    __vic::base64::decode(__vic::string_reader(s), bytes_writer(res));
    return res;
}
]]></code-block>
</section>

</chapter>


<chapter>
<title><tt>base64::encoded_length()</tt></title>

<code-block lang="C++">
constexpr size_t base64::encoded_length(size_t orig_len);
</code-block>

<p>Calculates the length of encoded sequence of characters using the original
length of the bytes sequence.</p>

</chapter>


<chapter>
<title><tt>base64::max_decoded_length()</tt></title>

<code-block lang="C++">
constexpr size_t base64::max_decoded_length(size_t orig_len);
</code-block>

<p>Estimates the maximum length of decoded sequence of bytes using the original
length of the characters sequence. The actual value depends on trailing
<tt>'='</tt> in the encoded value.</p>

</chapter>


</chapter>
