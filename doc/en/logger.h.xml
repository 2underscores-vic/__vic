<chapter xml:id="logger.h">
<title><tt>__vic/logger.h</tt></title>

<chapter xml:id="logger">
<title><tt>logger</tt></title>

<code-block lang="C++"><![CDATA[
class logger : private non_copyable
{
public:
    enum class severity
    {
        trace,
        debug,
        info,
        warning,
        error,
        fatal
    };
    using severity_t = severity; // use this alias as a type name
    class record;

    explicit logger(severity_t level = severity::info);
    virtual ~logger();

    severity_t level() const;
    void level(severity_t new_level);

    void message(severity_t severity, const char *msg, size_t msg_len);
    void message(severity_t severity, const char *msg);
    void message(severity_t severity, const std::string &msg);

    void trace(const char *msg);
    void debug(const char *msg);
    void info(const char *msg);
    void warning(const char *msg);
    void error(const char *msg);
    void fatal(const char *msg);

    void trace(const std::string &msg);
    void debug(const std::string &msg);
    void info(const std::string &msg);
    void warning(const std::string &msg);
    void error(const std::string &msg);
    void fatal(const std::string &msg);

    record trace();
    record debug();
    record info();
    record warning();
    record error();
    record fatal();

    bool accepts_trace() const;
    bool accepts_debug() const;
    bool accepts_info() const;
    bool accepts_warning() const;
    bool accepts_error() const;
    bool accepts_fatal() const;

    static const char *to_string(severity_t s);
protected:
    virtual void publish_record(severity_t , const char * , size_t ) = 0;
};
class logger::record
{
public:
    record(logger &log, severity_t sev);
    ~record();

    record append(const char *str, size_t str_len);

    template<class T> record operator<<(const T &v);
};
]]></code-block>

<p>Logging front-end. Abstract base class for loggers. Provides building of the
log records using operator <tt>&lt;&lt;</tt>, like <tt>iostream</tt>. Each log
record has the associated severity. The logger itself can filter out the
records by severity. There are 6 predefined levels of the severity (in
ascending order):</p>
<list style="numbered">
    <item>TRACE - detailed debug,</item>
    <item>DEBUG - debug,</item>
    <item>INFO - informational,</item>
    <item>WARNING - insignificant error or suspicious situation,</item>
    <item>ERROR - severe error but the application can continue,</item>
    <item>FATAL - critical unrecoverable error, the application can't
        continue.</item>
</list>

<p>INFO is the default logging level but any another can be chosen. If severety
of the log message (record) is below the logging level, it will be ignored and
will not be published in the log's output.</p>

<p>For creation of messages with the required severity, the set of functions
with the same name as the severity is available. For instance <tt>info()</tt>
for INFO messages. Or alternatively the universal function <tt>message()</tt>
can be used, in which the severity is the argument. Usually the specific
functions should be used.</p>

<p>There are two ways of logging. The first is plain and common:</p>
<code-block lang="C++">
log.trace("Trace message");
log.debug("Debug message");
log.info("Info message");
log.warning("Warning message");
log.error("Recoverable error");
log.fatal("Fatal error");
</code-block>

<p>The second is slightly more complex but provides more capabilities:</p>
<code-block lang="C++"><![CDATA[
log.error() << "Cannot open file " << filename << '!';
log.warning() << "Loop iteration no " << i;
]]></code-block>

<p>The call without parameters creates the object of type
<tt>logger::record</tt> with the corresponding severity. Futher, the message
is formed using operators <tt>&lt;&lt;</tt>. The message will be output to the
log at the end of the full-expression (term from the Standard).</p>

<p>If the message can't or shouldn't be formed with a single expression,
the named object of type <tt>logger::record</tt> has to be created, and parts
of the message have to be written to it. The resulting message will be output
to the log by it's destructor:</p>
<code-block lang="C++"><![CDATA[
{
    logger::record rec = log.info(); // Begin new record
    rec << "List elements: ";
    for(auto el : list) rec << el << ", ";
    // Constructed record will be printed to the log when the block exits
}
]]></code-block>

<note>In order to optimize the performace, use the plain functional notation
when the complete message is available:</note>
<code-block lang="C++"><![CDATA[
log.info("Message");
// but not
log.info() << "Message";
]]></code-block>

<p>Output of the records with the severities DEBUG and TRACE usually disabled.
Such records will not be published in the log but the program will waste the
time to format it. Therefore before creating any debug message using operator
<tt>&lt;&lt;</tt> one should check if debug is enabled using
<tt>accepts_debug()</tt> or <tt>accepts_trace()</tt> call:</p>
<code-block lang="C++"><![CDATA[
if(log.accepts_debug())
    log.debug() << ...; // build the message
]]></code-block>
<p>This advise doesn't cover plain calls <tt>debug(msg)</tt> and
<tt>trace(msg)</tt>, which have already prepared message and don't perform any
formatting.</p>

<p>The class <tt>logger</tt>, as it was mentioned in the beginning, is an
abstract base class. To implement concrete logger, the pure virtual function
<tt>publish_record()</tt> has to be implemented. The implementation has to
output the passed record somewhere, e.g. to file, terminal or DB.</p>

<section><title>Class members</title>

<synopsis>
<prototype>severity::trace</prototype>
<prototype>severity::debug</prototype>
<prototype>severity::info</prototype>
<prototype>severity::warning</prototype>
<prototype>severity::error</prototype>
<prototype>severity::fatal</prototype>
<p>Severity constants. Use this form for both C++11 and C++98 mode.</p>
</synopsis>

<synopsis>
<prototype>typename severity_t</prototype>
<p>Use this identifier as a type name if your code has to be C++98-compatible.
In C++11 mode it is just a synonym for <tt>severity</tt>.</p>
</synopsis>

<synopsis>
<prototype>explicit logger(severity_t level = severity::info)</prototype>
<p>Creates the logger with the specified logging level.</p>
<postcondition><tt>this->level() == level</tt></postcondition>
</synopsis>

<synopsis>
<prototype>severity_t level() const</prototype>
<p>Returns the current logging level.</p>
</synopsis>

<synopsis>
<prototype>void level(severity_t new_level)</prototype>
<p>Sets the logging level.</p>
<postcondition><tt>level() == new_level</tt></postcondition>
</synopsis>

<synopsis>
<prototype>void message(severity_t severity, const char *msg, size_t msg_len)</prototype>
<prototype>void message(severity_t severity, const char *msg)</prototype>
<prototype>void message(severity_t severity, const std::string &amp;msg)</prototype>
<p>Writes the message with the specified severity.</p>
</synopsis>

<synopsis>
<prototype>void trace(const char *msg)</prototype>
<prototype>void trace(const std::string &amp;msg)</prototype>
<prototype>void debug(const char *msg)</prototype>
<prototype>void debug(const std::string &amp;msg)</prototype>
<prototype>void info(const char *msg)</prototype>
<prototype>void info(const std::string &amp;msg)</prototype>
<prototype>void warning(const char *msg)</prototype>
<prototype>void warning(const std::string &amp;msg)</prototype>
<prototype>void error(const char *msg)</prototype>
<prototype>void error(const std::string &amp;msg)</prototype>
<prototype>void fatal(const char *msg)</prototype>
<prototype>void fatal(const std::string &amp;msg)</prototype>
<p>Writes the message with the corresponding severity.</p>
</synopsis>

<synopsis>
<prototype>logger::record trace()</prototype>
<prototype>logger::record debug()</prototype>
<prototype>logger::record info()</prototype>
<prototype>logger::record warning()</prototype>
<prototype>logger::record error()</prototype>
<prototype>logger::record fatal()</prototype>
<p>Creates new record with the corresponding severity. Message parts can be
added using operators <tt>&lt;&lt;</tt>.</p>
</synopsis>

<synopsis>
<prototype>bool accepts_trace() const</prototype>
<prototype>bool accepts_debug() const</prototype>
<prototype>bool accepts_info() const</prototype>
<prototype>bool accepts_warning() const</prototype>
<prototype>bool accepts_error() const</prototype>
<prototype>bool accepts_fatal() const</prototype>
<p>Returns <tt>true</tt> if a record with the corresponding severity will be
published. Usage of this functions enables to avoid the formatting of the
messages which eventually will not be published.</p>
</synopsis>

<synopsis>
<prototype>void publish_record(severity_t sev, const char *buf, size_t buf_len)</prototype>
<p>The implementaion of this pure virtual function has to output the content of
<tt>buf</tt> to the log as a one record. <tt>buf_len</tt> is the length of
<tt>buf</tt>. The function is always called with <tt>sev >= level()</tt>.
The implementation can rely on it.</p>
</synopsis>

<synopsis>
<prototype>static const char *to_string(severity_t s)</prototype>
<p>Returns text label for the specified severity that can be printed to the
log. For example, <tt>"DEBUG"</tt> will be returned for
<tt>severity::debug</tt>.</p>
</synopsis>

<synopsis>
<prototype>record::record(logger &amp;log, severity_t sev)</prototype>
<p>Creates the log record with the specified severity. Usually the <tt>logger</tt>'s
functions like <tt>info()</tt> without parameters should be used instead.</p>
</synopsis>

<synopsis>
<prototype>record::~record()</prototype>
<p>Outputs the constructed record to the log.</p>
</synopsis>

<synopsis>
<prototype>record record::append(const char *str, size_t str_len)</prototype>
<p>Appends the string to the message.</p>
</synopsis>

<synopsis>
<prototype>template&lt;class T> record record::operator&lt;&lt;(const T &amp;v)</prototype>
<p>The set of inserters for various data types. Calls
<tt>__vic::string_buffer::operator&lt;&lt;(v)</tt>.</p>
</synopsis>

</section>

<section><title>Example</title>

<code-block lang="C++"><![CDATA[
/////////////////////////////////////////////////////////////////////////////
// Output messages to std::clog with the severity label
class clogger : public __vic::logger
{
public:
    explicit clogger(severity_t level = severity::info) : logger(level) {}
protected:
    void publish_record(severity_t s, const char *rec, size_t rec_n)
    {
        std::clog << to_string(s) << ": ";
        std::clog.write(rec, rec_n) << std::endl;
    }
};
/////////////////////////////////////////////////////////////////////////////

int main()
{
    clogger log(clogger::severity::debug);

    log.info("Application is started");

    for(int i = 0; i < 5; i++)
        log.debug() << "Loop i = " << i;

    log.warning("Application end");
}
]]></code-block>

<p>Output:</p>

<tty>
INFO: Application is started
DEBUG: Loop i = 0
DEBUG: Loop i = 1
DEBUG: Loop i = 2
DEBUG: Loop i = 3
DEBUG: Loop i = 4
WARNING: Application end
</tty>

</section>

</chapter>

</chapter>
